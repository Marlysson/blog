<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Daily Development - misc</title><link href="https://marlysson.github.io/" rel="alternate"></link><link href="https://marlysson.github.io/feeds/categoria/misc.atom.xml" rel="self"></link><id>https://marlysson.github.io/</id><updated>2017-07-23T14:20:00-03:00</updated><entry><title>Properties em Python ... como fazer encapsulamento pythônico</title><link href="https://marlysson.github.io/python-properties-e-encapsulamento-na-orientacao-a-objetos.html" rel="alternate"></link><published>2017-07-23T14:20:00-03:00</published><updated>2017-07-23T14:20:00-03:00</updated><author><name>Marlysson Silva</name></author><id>tag:marlysson.github.io,2017-07-23:/python-properties-e-encapsulamento-na-orientacao-a-objetos.html</id><summary type="html">&lt;p&gt;Um tópico bastante interessante (porém curto) na orientação a objetos no Python são as properties. Elas são responsáveis por encapsular o acesso à variáveis das nossas classes, fazendo assim um design de classes mais completo, onde você pode ter algum processamento interno e só expor o que é adequado nas API's públicas de suas classes. Então vamos lá entender o que são elas e como usá-las.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Na orientação a objetos no Python há alguns aspectos diferentes do tradicional apresentado em outras linguagens OO, mas nem por isso é algo para se espantar, vai de acordo com a filosofia de cada linguagem.&lt;/p&gt;
&lt;p&gt;No Python todos os atributos de classe são públicos naturalmente, uma crítica que vejo muito é que não tem como restringir o acesso externo ao conteúdo das nossas classes, se valendo pelos modificadores de acesso : &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt; e &lt;code&gt;public&lt;/code&gt;, e por isso não tem uma boa orientação a objetos( usando como parâmetro a que é ensinada no Java por exemplo , com tudo explícitamente exposto para o programador ali na tela.)&lt;/p&gt;
&lt;p&gt;Mas como em linguagens de programação nem todas as features são feitas iguais, veremos a forma que o Python trata sua orientação a objetos no caso do encapsulamento.&lt;/p&gt;
&lt;h3&gt;Implementação Java-like do encapsulamento&lt;/h3&gt;
&lt;p&gt;Eu mesmo quando estava estudando Java e estava em transição para Python já usei essa forma de encapsulamento, ou seja, usava os famosos &lt;code&gt;get_&lt;/code&gt;e &lt;code&gt;set_&lt;/code&gt; para acessar e definir os valores dos atributos da classe.&lt;/p&gt;
&lt;p&gt;Então, com esse tipo implementado no Python usamos o que é mostrado tradicionamente por meio do &lt;code&gt;get&lt;/code&gt; e &lt;code&gt;set&lt;/code&gt; . .. vamos à um exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cupom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;desconto&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desconto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;desconto&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getNome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setNome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# E por ai vai para os outros atributos&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E na aplicação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cupom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cupom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;viva10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cupom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getNome&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;VIVA10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Convenhamos que fazer isso sendo que não há nenhuma implementação diferente de retorno e nem de definição de valores é meio overhead de código, ainda mais no Python onde a atribuição e definição pode ser feita do modo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cupom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;codigo&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;codigo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;codigo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E na aplicação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cupom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cupom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;viva10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cupom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;VIVA10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mais limpo e intuitivo.&lt;/p&gt;
&lt;h3&gt;Afinal o que são properties&lt;/h3&gt;
&lt;p&gt;Isso foi para introduzir como é feito o acesso controlado à atributos da classe... agora vamos ver o conceito que o Python tem para fazer esse acesso controlado.&lt;/p&gt;
&lt;p&gt;Bom, a "property" é um recurso que é responsável por realizar o acesso, a definição e a deleção em memória de atributos da classe. Ela é responsável por fazer todo o tratamento de acesso à dados internos de objetos... perfeito como alternativa para os &lt;code&gt;gets&lt;/code&gt; e &lt;code&gt;sets&lt;/code&gt; . E sua assinatura é da seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fdel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com isso, sabemos que nossas funções de &lt;code&gt;get&lt;/code&gt; e &lt;code&gt;set&lt;/code&gt; podemos colocá-las nos parâmetros da property e assim acessar da maneira pythônica os atributos ( como se fossem públicos ) , mas internamente sendo feito algum tratamento .. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lembrando: Você não deve colocar property para todos os seus atributos ... se eles não precisam validar algum valor ou retornar algo formatado não há necessidade de fazer todo esse overhead para somente ter esse arcabouço de ferramentas. Sempre bom senso.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Um exemplo usando o Cupom passado seria da seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cupom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;desconto&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_desconto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;desconto&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getNome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_nome&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;getNome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E na aplicação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cupom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cupom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;viva10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cupom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;
&lt;span class="n"&gt;VIVA10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Foi usado um &lt;em&gt;underscore&lt;/em&gt; por convenção no início do atributo &lt;code&gt;nome&lt;/code&gt; para indicar que ele não será usado na sua forma integral na api da classe que será exposta para terceiros... ele passará por alguns processamentos antes de sua exposição.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Está mais pythônico, mas ainda sim tem aqueles get's ali né... A nossa segunda forma de usar as property é usando-as como um &lt;a href="https://www.Python.org/dev/peps/pep-0318/"&gt;decorator&lt;/a&gt;.. Usando-as dessa forma basicamente será uma anotação acima de uma função que se comportará como um novo atributo da classe, e internamente terá todo o processamento.&lt;/p&gt;
&lt;p&gt;Usando-as como decorators temos as seguintes possibilidades:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@property&lt;/span&gt;
&lt;span class="nd"&gt;@property.getter&lt;/span&gt;
&lt;span class="nd"&gt;@property.setter&lt;/span&gt;
&lt;span class="nd"&gt;@property.deleter&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cada uma indicando qual é a forma de acesso ao atributo. O primeiro decorator será usado para definir qual atributo será "mapeado" para uma property.&lt;/p&gt;
&lt;h4&gt;Passos para criar uma property&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Anotar um método qualquer com a anotação &lt;code&gt;@property&lt;/code&gt; e nesse método retornar o atributo que deseja ser tratado.&lt;/li&gt;
&lt;li&gt;Se necessário criar as outras anotações de definição ou obtenção do atributo. Essas anotações ( getter , setter e deleter) deverão ser usadas com relação à property criada.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Vamos à um exemplo.&lt;/h3&gt;
&lt;p&gt;Dessa vez vou mostrar que cada operação sobre um atributo anotado com property é capturado internamente pelo Python, assim podemos tratá-los como bem entendermos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cupom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;desconto&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_desconto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;desconto&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Obtendo o valor do atributo nome&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_nome&lt;/span&gt;

    &lt;span class="nd"&gt;@nome.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;valor_do_nome_recebido&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Capturando a definição de um atributo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;valor_do_nome_recebido&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Se necessário haveria para os outros atributos&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Na aplicação&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cupom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;viva10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Obtendo&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;valor&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;atributo&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;
&lt;span class="n"&gt;viva10&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cupom10&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;Capturando&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;definição&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;um&lt;/span&gt; &lt;span class="n"&gt;atributo&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Obtendo&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;valor&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;atributo&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;
&lt;span class="n"&gt;CUPOM10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Repare que no setter foi referenciado a property criada anteriormente. Sempre que for usar uma operação de property deverá ser com relação à uma property nomeada anteriormente e que mapeia seu acesso para um atributo da classe.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nesse ponto do nosso conhecimento de properties temos pleno controle sobre nossos dados, tanto sobre o que entra como definição, quanto o que sai como processamento dos nossos dados... e tudo isso sem deixar de lado a simplicidade da sintaxe externa do Python que é o melhor...todo o processsamento ocorrendo internamente, sem o &lt;em&gt;cliente&lt;/em&gt; ter conhecimento interno da nossa implementação.&lt;/p&gt;
&lt;p&gt;Para um exemplo mais prático vamos fazer com que não seja possível definir um desconto em formato de string, os formatos permitidos serão somente &lt;code&gt;int&lt;/code&gt; ou &lt;code&gt;float&lt;/code&gt; , logicamente. Vamos lá.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cupom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;desconto&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_desconto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;desconto&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;desconto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_desconto&lt;/span&gt;

    &lt;span class="nd"&gt;@desconto.setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;desconto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;valor_desconto&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;valor_desconto&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Valor inválido, somente inteiros ou decimais&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_desconto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;valor_desconto&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E na aplicação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cupom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;viva10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desconto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desconto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;property.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desconto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cupom10&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;property.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;desconto&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Valor inválido, somente inteiros ou decimais&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Valor&lt;/span&gt; &lt;span class="n"&gt;não&lt;/span&gt; &lt;span class="n"&gt;permitido&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;somente&lt;/span&gt; &lt;span class="n"&gt;inteiros&lt;/span&gt; &lt;span class="n"&gt;ou&lt;/span&gt; &lt;span class="n"&gt;decimais&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E voilà... mantemos nossa API simples para quem usará, e ao mesmo tempo fizemos um encapsulamento adequado do que ocorre dentro da nossa classe, assim escondendo detalhes de implementação.&lt;/p&gt;
&lt;p&gt;E é isso pessoal , o uso de property e conseqüentemente como fazer o encapsulamento adequado em OO-Python.&lt;/p&gt;
&lt;p&gt;Até o próximo post... Se quiserem sugerir algum tópico só comentar.&lt;/p&gt;</content><category term="Python"></category><category term="Boas Práticas"></category><category term="Orientação a Objetos"></category></entry><entry><title>O que você precisa saber para iniciar com Ambientes Virtuais</title><link href="https://marlysson.github.io/o-que-voce-precisa-saber-sobre-ambientes-virtuais.html" rel="alternate"></link><published>2017-06-03T20:20:00-03:00</published><updated>2017-06-03T20:20:00-03:00</updated><author><name>Marlysson Silva</name></author><id>tag:marlysson.github.io,2017-06-03:/o-que-voce-precisa-saber-sobre-ambientes-virtuais.html</id><summary type="html">&lt;p&gt;Nos dias atuais com o Python servindo para vários proprósitos fica difícil trabalhar com projetos de diversos seguimentos sem gerenciar todas as duas dependências, e ainda mais quem for iniciante no python e está querendo organizar seus projetos. Nesse posto pretendo explicar o necessário para você saber trabalhar com ambientes virtuais mais tranquilamente e sanar dúvidas que ainda existam.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Esse tutorial será válido para Windows , visto que vi poucos explicando-o comparado à linux. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bom pessoal hoje vou falar de um assunto que quando o pessoal está iniciando em algum projeto em Python tem certa dificuldade, então vou tentar sanar algumas neste post.&lt;/p&gt;
&lt;h4&gt;O INÍCIO ( ORIGEM DO PROBLEMA )&lt;/h4&gt;
&lt;p&gt;Bom, pelo menos eu, quando iniciei no desenvolvimento com Python sempre ouvia o pessoal falar em ambientes virtuais... que tinha que isolar as libs de projeto, essas coisas, mas não entendia muito bem pois eu só trabalhava com pequenos projetos e sempre com as mesmas libs, ainda mais que eu estava começando a aprender Python e suas bibliotecas, então eu instalava tudo no sistema operacional e começava a codificar ( que era o que eu queria ) :D  &lt;/p&gt;
&lt;p&gt;Então no inicio o pessoal ( até onde eu vi ), instalava as libs dos seus projetos direto no sistema operacional que estava usando, e se surgisse outro projeto com outras libs era fácil, só instalar ao lado das que já haviam (sem problemas), negócio era quando o projeto precisava de libs em outras versões das que já existiam, aí que o negócio começava a complicar, tinha que desistalar as que já estavam e instalar do outro projeto... depois voltar as outras libs quando voltasse para o projeto antigo... em resumo, virava uma bagunça, e para administrar isso era complicado.&lt;/p&gt;
&lt;h4&gt;COMO SOLUCIONARAM&lt;/h4&gt;
&lt;p&gt;Para resolver esse problema o pessoal criou um conceito chamado &lt;code&gt;ambiente virtual&lt;/code&gt;, que nada mais é que uma pasta com arquivos que simulam uma instalação real do Python, e com isso recria todo um ambiente para que libs possam ser instaladas, e assim possa "apontar" a instalação atual para determinada pasta naquele momento desejada para se trabalhar ( ambiente virtual de uma instalação Python ) , e com esse ambiente ativado ele enxergará determiadas libs instaladas, e se ativar outro ambiente que aponta para outro path de uma outra instalação Python com libs totalmente diferentes.&lt;/p&gt;
&lt;p&gt;Desse modo você pode criar vários ambientes com sua própria instalação do Python e instalar qualquer lib nesse ambiente que ele não fica exposto para o seu sistema, e assim deixará cada projeto isolado e tranquilo de se trabalhar.&lt;/p&gt;
&lt;h4&gt;COMO INSTALAR&lt;/h4&gt;
&lt;p&gt;A coisa mais básica que se precisa para iniciar é o &lt;code&gt;pip&lt;/code&gt; instalado . Por padrão ele vem nas instalações do &lt;strong&gt;Python 2 &amp;gt;= 2.7.9&lt;/strong&gt; e &lt;strong&gt;Python 3 &amp;gt;= 3.4&lt;/strong&gt; , mas se você não está usando nenhuma dessas... Dificilmente :D ..&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;O &lt;code&gt;pip&lt;/code&gt; é uma lib que merece atenção, pois ela é o gerenciador padrão de dependências de projetos Python, com ela é possível instalar via linha de comando todas as libs que seu projeto precisa, tudo isso graças ao repositório de libs python: &lt;strong&gt;&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt;,&lt;/strong&gt; onde você encontrará diversas facilidades para seu projeto, desde tratamento de datas, frameworks web, machine learning, gráficos, tratamento de requisições web...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mas se não houver o pip instalado na máquina então acesse esse &lt;strong&gt;&lt;a href="https://bootstrap.pypa.io/get-pip.py"&gt;link&lt;/a&gt;&lt;/strong&gt;, salve em algum local e execute por meio do python para instalá-lo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 get-pip.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se o pip já estava na sua máquina execute o comando: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 -m pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E começará a instalação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; python3 -m pip install virtualenv
Downloading/unpacking virtualenv
Installing collected packages: virtualenv
Successfully installed virtualenv
Cleaning up...
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;O comando &lt;strong&gt;python3 -m&lt;/strong&gt; indica será executado uma lib python por meio do terminal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se ele tiver sido instalado via get-pip.py basta usar o &lt;code&gt;pip&lt;/code&gt; na linha de comando, sem referenciar o Python.&lt;/p&gt;
&lt;h4&gt;COMO USAR&lt;/h4&gt;
&lt;p&gt;Depois de instalado, a lib estará disponível no console para criar ambientes da seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; virtualenv python_project
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se tudo ocorrer bem aparecerá as seguintes mensagens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;D:\Ambientes\&amp;gt; virtualenv python-project
Using base prefix &amp;#39;C:\\Python34&amp;#39;
New python executable in D:\Ambientes\python-project\Scripts\python3.exe
Also creating executable in D:\Ambientes\python-project\Scripts\python.exe
Installing setuptools, pip, wheel...done.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto, com isso você tem um ambiente para se trabalhar. Mas para iniciar de fato é preciso ativá-lo, e para isso basta entrar na pasta &lt;code&gt;Scripts&lt;/code&gt; dentro da pasta do ambiente criado e executar pelo cmd o arquivo activate.bat ( pode escrever sem a extenção .bat ). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd D:\Ambientes\python-project\Scripts
D:\Ambientes\python-project\Scripts&amp;gt; activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com isso o seu console mudará e passará a ter o nome do ambiente no início do conteúdo do endereço atual , no meu caso :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(python-project) D:\Ambientes&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E para desativar basta usar o comando &lt;code&gt;deactivate&lt;/code&gt; de qualquer ponto do seus sistema através do cmd.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;D:\deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com isso você não estará com nenhum ambiente ativado.&lt;/p&gt;
&lt;p&gt;Dessa forma você já pode instalar suas libs independentes para trabalhar tranquilamente sem conflitos com outros projetos.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note que eu não precisei criar o ambiente virtual dentro do projeto que eu iria trabalhar, e nem precisa, como nós estamos trabalhando com ambientes virtuais ele funciona como um ambiente comum como se fosse a instalação normal do Python depois de instalado. Com isso nossos comandos Python no cmd enxergarão o Python atualmente ativo, seja do sistema operacional , seja do ambiente virtual. Dessa forma eu posso ter uma pasta chamada "Ambientes" para conter cada ambiente de libs que trabalharei em cada projeto, e quando for trabalhar no projeto respectivo daquele ambiente eu só ativo ele e vou trabalhar no projeto normalmente. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Com isso: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;O ambiente só é associado ao projeto através da ativação do mesmo , não necessariamente precisa está dentro do projeto.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;BOAS PRÁTICAS&lt;/h4&gt;
&lt;p&gt;E para ficar ainda melhor trabalhar com ambientes virtuais há uma prática que é usar um arquivo chamado &lt;strong&gt;requirements.txt&lt;/strong&gt; com as libs necessárias, sua estrutura é parecida com:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;faker
requests
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cada lib usada no projeto separada por linha, e para executá-lo basta estar com o ambiente ativado ( através do comando &lt;code&gt;activate&lt;/code&gt; ) e executá-lo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assim o &lt;em&gt;pip&lt;/em&gt; usará o comando &lt;code&gt;pip install lib&lt;/code&gt; recursivamente para cada lib contida no arquivo. Dessa forma em projetos em equipes basta gerar um requirements para o projeto em uso e com isso o outro programador executá-lo para ficar com o ambiente totalmente igual ( com relação à bibliotecas ) ao da equipe. E ainda vejo usarem arquivos como &lt;strong&gt;dev_requirements.txt&lt;/strong&gt;, onde nesse arquivo haverá por exemplo libs respectivas à testes unitários e de cobertura de código para ser verificado antes de fazer o deploy, não sendo necessário instalar essas libs no ambiente de produção.&lt;/p&gt;
&lt;h6&gt;Mas e para gerar esse arquivo com as libs que estou usando no meu ambiente virtual?&lt;/h6&gt;
&lt;p&gt;Simples, o pip possui um comando chamado &lt;code&gt;freeze&lt;/code&gt; onde ele pega as libs da instalação atual do python ( lembra que um ambiente virtual está ativado ? ). mais suas dependências e gera um arquivo com suas versões naquele momento. Vamos gerar um arquivo requirements para as libs listadas no exemplo acima.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; pip freeze &amp;gt; requirements.txt
certifi==2017.4.17
chardet==3.0.3
Faker==0.7.15
idna==2.5
python-dateutil==2.6.0
requests==2.17.3
six==1.10.0
urllib3==1.21.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assim o &lt;code&gt;pip freeze&lt;/code&gt; joga a saída do comando ( que é a lista das libs instaladas no ambiente atual ) para o arquivo.&lt;/p&gt;
&lt;p&gt;Pronto, as libs que você usa no seu ambiente estão em um arquivo que pode ser compartilhado, atualizado e mudado entre a equipe.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lembrando que o &lt;strong&gt;requirements.txt&lt;/strong&gt; por convenção deve ficar na raiz do projeto&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;BÔNUS&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Há maneiras de escolhar uma versão diferente do python para cada ambiente por meio do parâmetro --python="Diretório da versão do python" junto ao comando &lt;code&gt;virtualenv&lt;/code&gt;, assim algumas libs que só suportam o python2.7 poderão ser executadas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A partir python3.4 há vem incluído uma lib chamada &lt;code&gt;venv&lt;/code&gt; responsável por criar ambientes virtuais sem necessidade de componentes externos. Basta:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv nome_do_ambiente
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Usando o próprio python para criar o ambiente o fluxo é o mesmo explicado no post.&lt;/p&gt;
&lt;p&gt;Bom pessoal era isso que tinha pra explicar sobre como trabalhar com ambientes virtuais para deixar seus projetos mais organizados. Até o próximo post.&lt;/p&gt;
&lt;h4&gt;REFERÊNCIAS&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;Pip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://virtualenv.pypa.io/en/stable/"&gt;Virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="Ambientes Virtuais"></category><category term="Boas Práticas"></category></entry><entry><title>Criando um loader com css puro</title><link href="https://marlysson.github.io/loader-com-css-puro.html" rel="alternate"></link><published>2017-02-26T17:00:00-03:00</published><updated>2017-02-26T17:00:00-03:00</updated><author><name>Marlysson Silva</name></author><id>tag:marlysson.github.io,2017-02-26:/loader-com-css-puro.html</id><summary type="html">&lt;p&gt;Bom pessoal , vou mostrar pra vocês como fazer um simples loader só com css . Já que eu estava revisando esse assunto por esses dias , resolvi postar essa dica rapidinho que pode ajudar vocês em algumas aplicações; Lembrando que tudo será feito só com css ( inclusive a animação ) , sem a necessidade de javascript , e também sem SVG ( para a parte das formas ). Então bora lá.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Geralmente o pessoal usa para criar esses pequenos componentes elementos simples como as tags: &lt;code&gt;i&lt;/code&gt; , &lt;code&gt;b&lt;/code&gt; , &lt;code&gt;span&lt;/code&gt; ou qualquer elemento que não interfira no fluxo normal do documento, lembrando que para algo mais complexo poderia usar os pseudo-seletores : &lt;code&gt;:after&lt;/code&gt; e o &lt;code&gt;:before&lt;/code&gt; , qualquer hora faço um post explicando esses seletores.&lt;/p&gt;
&lt;p&gt;Bom , primeiramente vamos fazer o markup que o nosso html terá, usarei um elemento &lt;code&gt;span&lt;/code&gt; ( só por conveniência ).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;circle one_open&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aqui usei uma classe para representar a forma do loader que será um círculo e outra classe para indicar que o loader terá uma só abertura ( mais tarde vou fazer uma com duas aberturas , e aí reutilizarei as classes já feitas ).&lt;/p&gt;
&lt;p&gt;Agora vamos para o css básico:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="mh"&gt;#1abc9c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E como está ficando até agora:&lt;/p&gt;
&lt;p data-height="125" data-theme-id="dark" data-slug-hash="oZXjaM" data-default-tab="result" data-user="Marlysson" data-embed-version="2" data-pen-title="Part-one script" class="codepen"&gt;See the Pen &lt;a href="http://codepen.io/Marlysson/pen/oZXjaM/"&gt;Part-one script&lt;/a&gt; by Marlysson (&lt;a href="http://codepen.io/Marlysson"&gt;@Marlysson&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;h5&gt;Observação&lt;/h5&gt;
&lt;p&gt;Vejam que adicionei a propriedade &lt;code&gt;display&lt;/code&gt; com o valor &lt;code&gt;inline-block&lt;/code&gt;.
O motivo de adicionar o valor &lt;code&gt;display:inline-block&lt;/code&gt; é que a tag &lt;code&gt;span&lt;/code&gt; não possui uma propriedade de fluxo de documento definida, sendo assim , ele não reconhece determinadas propriedades, como é o caso da &lt;em&gt;width&lt;/em&gt; e da &lt;em&gt;height&lt;/em&gt; . Quando alterei o valor da propriedade &lt;code&gt;display&lt;/code&gt; para &lt;code&gt;inline-block&lt;/code&gt; o elemento agora é um elemento que se encaixa no fluxo normal da página ( inline ) , mas também podendo reconhecer propriedades de blocos para ( nesse caso ) ter alguma forma , seja circular , quadrada , triangular... etc.&lt;/p&gt;
&lt;p&gt;Agora vamos eliminar uma das bordas do círculo para ter a ilusão que é um loader. O truque para isso é deixar uma das bordas transparente, assim dará a impressão que não há nada ali.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;one_open&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E voilà. Agora só falta animar.&lt;/p&gt;
&lt;p data-height="125" data-theme-id="dark" data-slug-hash="QpbyWK" data-default-tab="result" data-user="Marlysson" data-embed-version="2" data-pen-title="Step-two" class="codepen"&gt;See the Pen &lt;a href="http://codepen.io/Marlysson/pen/QpbyWK/"&gt;Step-two&lt;/a&gt; by Marlysson (&lt;a href="http://codepen.io/Marlysson"&gt;@Marlysson&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;Para animar deve ser feito dois passos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Adicionar o comportamento à cada passo da animação ( keyframes )&lt;/li&gt;
&lt;li&gt;Ligar o keyframe com o elemento&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Passo 1&lt;/h3&gt;
&lt;p&gt;Vamos fazer com que o elemento fique rodando de 0 à 360 graus;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;keyframes&lt;/span&gt; &lt;span class="nt"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="kt"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Os keyframes são responsáveis por definir o comportamento do elemento a cada estado durante a execução da animação , com isso pode-se definir a forma do elemento desde sua criação até completar a animação.&lt;/p&gt;
&lt;h3&gt;Passo 2&lt;/h3&gt;
&lt;p&gt;Para ligar com o elemento html devemos usar algumas propriedades de &lt;code&gt;css-animations&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;one_open&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;animation-name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;animation-timing-function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Explicando:&lt;/h4&gt;
&lt;p&gt;O elemento &lt;strong&gt;one_open&lt;/strong&gt; será animado segundo o comportamento da animação de nome &lt;strong&gt;rotate&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Propriedades e valores:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;animation-name&lt;/strong&gt; : O mesmo nome do keyframe criado&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;animation-iteration-count&lt;/strong&gt; : Aqui foi definido para que fique para sempre executando a animação.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;animation-timing-function&lt;/strong&gt; : Aqui é definido o ritmo da animação , além de linear é possível definir para que ela inicie rápido e desacelere no final , é possível definir várias velocidades durante durante a animação.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;animation-duration&lt;/strong&gt; : Duração total da animação.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E no final a animação ficou assim:&lt;/p&gt;
&lt;p data-height="125" data-theme-id="0" data-slug-hash="Qpbyag" data-default-tab="result" data-user="Marlysson" data-embed-version="2" data-pen-title="Step-three" class="codepen"&gt;See the Pen &lt;a href="http://codepen.io/Marlysson/pen/Qpbyag/"&gt;Step-three&lt;/a&gt; by Marlysson (&lt;a href="http://codepen.io/Marlysson"&gt;@Marlysson&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;E para criar uma nova forma fica fácil , pois já há uma classe específica para o círculo , ficando para a gente só criar a classe responsável pela outra animação. Por exemplo , uma com duas aberturas ficaria assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;two_open&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Usando junção de seletores ( para não repetir propriedades ) */&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;one_open&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;two_open&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;animation-name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;animation-timing-function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Resultado final&lt;/p&gt;
&lt;p data-height="125" data-theme-id="0" data-slug-hash="GWJoZK" data-default-tab="result" data-user="Marlysson" data-embed-version="2" data-pen-title="Step-three" class="codepen"&gt;See the Pen &lt;a href="http://codepen.io/Marlysson/pen/GWJoZK/"&gt;Step-four&lt;/a&gt; by Marlysson (&lt;a href="http://codepen.io/Marlysson"&gt;@Marlysson&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;Bom pessoal está aí um simples loader para usarem nas suas aplicações , ou só ver como grandes players de bibliotecas de animação fazem isso.&lt;/p&gt;
&lt;p&gt;Até o próximo post.&lt;/p&gt;
&lt;h3&gt;Referências&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tableless.com.br/transition-e-animation/"&gt;Tableless - Transition e Animation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/almanac/properties/a/animation/"&gt;CSS-Tricks - Animation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webdesign.tutsplus.com/tutorials/a-beginners-introduction-to-css-animation--cms-21068"&gt;Tutsplus - A beginners introduction to css animation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Frontend"></category><category term="css"></category><category term="experimentos"></category></entry><entry><title>Princípios SOLID - Vantagens e fragilidades de código</title><link href="https://marlysson.github.io/principios-solid-a-teoria.html" rel="alternate"></link><published>2017-02-12T05:00:00-03:00</published><updated>2017-02-12T05:00:00-03:00</updated><author><name>Marlysson Silva</name></author><id>tag:marlysson.github.io,2017-02-12:/principios-solid-a-teoria.html</id><summary type="html">&lt;p&gt;No desenvolvimento de software, nós desenvolvedores sempre presamos por construir sistema que sejam o mais fiel possível ao pedido do cliente ( por mais que haja mudanças no decorrer do tempo ) , mas além de tudo presamos por outros fatores que acontecem no decorrer ou após o desenvolvimento.&lt;/p&gt;</summary><content type="html">&lt;p&gt;No desenvolvimento de software, nós desenvolvedores sempre presamos por construir sistema que sejam o mais fiel possível ao pedido do cliente ( por mais que haja mudanças no decorrer do tempo ) , mas além de tudo presamos por outros fatores que acontecem no decorrer ou após o desenvolvimento.&lt;/p&gt;
&lt;h4&gt;Mudanças&lt;/h4&gt;
&lt;p&gt;Talvez seja um dos principais motivos para focarmos em um bom desenvolvimento de softwares: poder adaptar à mudanças que possam ocorrer nas regras de negócios ( o que é totalmente plausível ) . Um dos princípios SOLID fala justamente nesse fator, poder construir um software que quando for solicitado alguma mudança não seja alterado o código existente, seja adicionado algo novo para poder suprir essa mudança que ocorreu.&lt;/p&gt;
&lt;h4&gt;Entrada de um novo desenvolvedor&lt;/h4&gt;
&lt;p&gt;Em toda a equipe de desenvolvedores com certeza poderá haver a chegada de um novo integrante , e tem vez que um software mal escrito pode causar até uma demora na adaptação desse novo integrante na equipe, visto que não entenderá muito bem o que determinada classe faz no sistema como um todo ou até ficar um mal entendido na função dela e continuar o desenvolvimento com algum tipo de erro.&lt;/p&gt;
&lt;h4&gt;Manutenção&lt;/h4&gt;
&lt;p&gt;A maioria dos softwares precisam em algum momento de sua existência de uma manutenção , seja para consertar algum bug que apareceu ou pra ajustar algo que não se adaptou bem na sua instalação no local onde ficaria instalado, e os SOLID facilitariam isso pois o sistema estaria estruturado de uma maneira que seria mais fácil ( ou menos dolorido ) encontrar o bug que deu origem à manutenção do software , pois de certa forma o próprio software “falaria” qual o tipo de erro que ocorreu , e não uma forma genérica; por exemplo , uma exception levantada do tipo &lt;code&gt;RuntimeException&lt;/code&gt; pois assim não diria muita coisa sobre o erro, para facilitar teria várias mensagens customizadas de exceções que podem ter ocorrido durante o erro ( mensagens de regras de negócio ) e assim ir direto ao tipo do erro e poder solucioná-lo.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Observação:&lt;/strong&gt; Sobre existir manutenção em softwares: Por que após mais de 40 anos de experiência em desenvolvimento de software e milhares de livros feitos na área de Engenharia de Software sobre formas de conduzir desenvolvimentos de softwares corretos, ainda existe softwares com falhas nos negócios e que precisam de manutenção? Teoricamente não era pra haver mais softwares com manutenção devido ao tempo de “prática” na área..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bom , passado a parte do que um bom código escrito usando os SOLID resolveria, vamos falar dos “bad smell” (Mau cheiro) , termo cunhado por &lt;strong&gt;Robert C. Martin - Uncle Bob&lt;/strong&gt;, para falar de uma forma humorada dos “cheiros“ que um código mal escrito “exala” .&lt;/p&gt;
&lt;h2&gt;Exemplos de Bad Smell&lt;/h2&gt;
&lt;h4&gt;Rigidez&lt;/h4&gt;
&lt;p&gt;Esse mau cheiro diz respeito ao quanto o software é difícil crescer ou mudar , quando ele é muito amarrado a implementações de outras partes do software , ou seja , possui um alto acoplamento com outras classes, em que se mudar algo em algumas das suas dependências haverá algum efeito colateral na classe que a usa. Exemplos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Efeitos colaterais internos ao mudar implementação das suas dependências.&lt;/li&gt;
&lt;li&gt;Uso exagerado de herança, onde mudando na classe mãe, mudará necessariamente nas suas filhas, causando uma cascata de alterações involuntárias.&lt;/li&gt;
&lt;li&gt;Pensar : “É muito mais difícil do que eu pensava” kkk . Faz parte.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Viscosidade&lt;/h4&gt;
&lt;p&gt;Diz respeito à facilidade que é fazer primeiramente o que é errado do que o certo em desenvolvimento de software, quando você tem uma funcionalidade pra implementar pensa primeiro em resolver o determinado problema do que abstraí-lo e pensar mais abstratamente podendo prever futuros problemas que podem acontecer, e pensando em abstrações você pode até tornar seu software adaptável à mudanças que venham a ocorrer, claro , não exagerar em abstrações, pois pode ser que haja por exemplo uma abstração e somente uma classe use ela.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nesse tópico entra a parte dos testes, que é uma das maiores resistências dos desenvolvedores, fazendo os testes do software , &lt;em&gt;TDD&lt;/em&gt; , você modela como seu software funcionará e ainda estará testando diversos cenários onde seu software atuará, facilitando assim refatorações futuras, pois estará apoiado nos testes quando mudar determinada implementação, não tendo toda hora que testar input após input do seu sistema, o que geralmente torna o teste manual do sistema custoso.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Repetição Desnecessária&lt;/h4&gt;
&lt;p&gt;Nesse mau cheiro há o clássico copy-paste ( copiar - colar ) , quando ocorre o uso de muito ctrl+c + ctrl+v , copia a funcionalidade de um método e cola em outro porque tem um função parecida, ou se não houver um código bem encapsulado poderá ter um implementação solta no código e uma vez ou outra ter que usar em outro local, e como não está encapsulado ocorrer o mau cheiro da rigidez, não podendo reutilizar o método ( funcionalidade ) em outro local, e assim, causando repetições desnecessárias, exemplos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uso de ctrl+f ( procurar ) para encontrar os diversos lugares em que existe determinada implementação quando for mudá-la.&lt;/li&gt;
&lt;li&gt;Uso de ctrl+c + ctrl+v em vários lugares.&lt;/li&gt;
&lt;li&gt;Uso exagerado de perguntas à objetos de qual tipo ou sobre determinada informação em que se está interessado , por exemplo : perguntar a função de determinado objeto funcionário para aplicar determinado desconto no seu salário, o que poderia ser resolvido com polimorfismo.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Objetos devem falar o que querem fazer e não perguntar aos outros se eles estão aptos a resolver seus problemas. &lt;strong&gt;Objects should tell , don't ask&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Copiar / Colar em editores de textos é aceitável, mas em desenvolvimento de software pode ser catastrófico.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Complexidade Desnecessária&lt;/h4&gt;
&lt;p&gt;Esse mau cheiro é característico da “melhora antecipada” , pois o desenvolvedor começa já aplicando diversas implementações no código para poder ter um melhor aproveitamento de performance no código , o mais clássico que vejo é: “Um for de determinado jeito é mais rápido?”, ele começa antecipar ocasiões futuras que podem nunca ocorrer, como suportar milhões de usuários no sistema dele, no caso de desempenho, tem também a parte de criar abstrações desnecessárias, já começa a aplicar padrões de projeto nas primeiras linhas do código , sendo que eles servem para fazer refatorações em códigos já bem estruturados , com Padrões de Projeto no início causa uma complexidade antecipada que pode custar um design bem feito do software. Exemplos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Usando operadores ternários com 3 ou 4 verificações, por exemplo, PHP;&lt;/li&gt;
&lt;li&gt;Usando funções &lt;code&gt;lambda&lt;/code&gt; com vários argumentos e ainda adiciona uns map’s , filter’s .. tudo inline ainda por cima, por exemplo , Python;&lt;/li&gt;
&lt;li&gt;Operadores bitwise com vários shifts e usando números mágicos para essas manipulações pra lá e pra cá, depois a pessoa nem lembra pra que servia o número.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Uma dica:&lt;/strong&gt; quando ver um &lt;strong&gt;mau cheiro forte&lt;/strong&gt; espere um tempo até consertá-lo, por exemplo nas abstrações, espere aparecer um caso em que precise para poder criá-las. Pois pode ficar um outro mau cheiro : complexidade desnecessária.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Permita-se levar o primeiro tipo“&lt;/strong&gt; , após ele analise o problema e proponha uma solução.&lt;/p&gt;
&lt;p&gt;No caso dos exemplos citado, prova que não é a ferramenta que influencia o programador a fazer a coisa errada, e sim o uso exagerado e exacerbado de determinadas funções da linguagem , e até o seu desconhecimento de parte das funcionalidades da linguagem, fazendo o programador não utilizar as melhores práticas e o que é recomendado .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Opacidade&lt;/h4&gt;
&lt;p&gt;Esse mau cheiro é clássico de código mau escrito, porque fala a respeito do quanto o próprio desenvolvedor não consegue mais ler seu próprio código , e assim se nem ele sabe explicar fica difícil .. :D . Esse mau cheiro se relaciona com o da viscosidade, pois quando mais fácil o desenvolvedor se inclinar em fazer a implementação imediatista que nem sempre é a melhor e mais completa , fica mais fácil ele fazer uma solução que fique um tanto implícita, que fique difícil de entender, por exemplo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nomear variáveis que não representam muito o seu significado , por exemplo: a, pg, num… e por ai vai.&lt;/li&gt;
&lt;li&gt;Uso de magic strings para fazer representações de elementos no código , por exemplo: PG , NPG , AGNDD , para representar os status de uma compra ( PAGO , NÃO-PAGO , AGENDADO ) , além de magic numbers para o mesmo propósito: 0, 1, 2, 3 …&lt;/li&gt;
&lt;li&gt;Uso exagerado de comentários, onde o próprio código já teria que ser explicativo o bastante para dizer o que ele está fazendo. Existência de muitos comentários pode ser um mau indício.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Fragilidade&lt;/h4&gt;
&lt;p&gt;A fragilidade diz respeito à fraqueza do design do software , em que uma pequena mudança em uma determinada parte do código causa diversas mudanças em outras partes , o pior , partes que não estão nem relacionadas, os desenvolvedores podem nem saber as conexões que existem ao longo das classes. Exemplos :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dizem : “Nem cheguem perto ou mexam nessa classe”, tipo uma classe “god” que faz várias coisas , tipo amarra o sistema pra não cair.&lt;/li&gt;
&lt;li&gt;Manda o estagiário revisar determinada parte do código , fazer uma refatoração, pois dará muitos problemas, deixar ele um pouco lá resolvendo :D .&lt;/li&gt;
&lt;li&gt;Desenvolvedores tem medo de mexer em determinada parte do código por receio de causar vários problemas em cascata no resto do sistema.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A diferença com a rigidez é que aqui, por mais pequena que seja a mudança causa vários efeitos colaterais, já na rigidez, o desenvolvedor não pode mudar nada pois está tudo muito acoplado.&lt;/p&gt;
&lt;h4&gt;Imobilidade&lt;/h4&gt;
&lt;p&gt;Diz respeito ao alto acoplamento dos diversos componentes do sistema, com esse mau cheiro fica muito difícil decompor o sistema em módulos reutilizáveis , uma determinada função em uma classe poderia ser decomposta em uma classe e ser reutilizável no sistema como um todo, mas essa determinada função está intimamente ligada à implementação de uma parte do sistema, ficando impedido de retirá-la de lá e poder desacoplá-la e abstrair. Veja que relaciona com outros bad smells , por exemplo , a rigidez , onde o design do software está muito amarrado à implementações. Quando mais bad smells tiver, mais “estragado” estará o seu sistema :D . Exemplos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implementações intimamente ligadas a componentes, dificultando o desacoplamento, abstração.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Orientação a Objetos"></category><category term="Boas Práticas"></category></entry></feed>